function foreacharg     (args, f) 
function println        (...)
function printlns       (...)
function printsec       (...)
function platform
function iswin32
function islinux
function deltaconfiguration
function isdebug
function islinux
function libifyname     (filename) 
function del            (delegator, delegate)
function loadlibs
function libsloaded
function argstostring   (...)
//
// Object Error
// ------------
// - AddError(...)
//   adds an error. The arguments are concatenated into a single error
//   message string. Currently this causes execution abortion but this
//   should not be considered granded.
// - UnknownPlatform()
//   adds an error with a default error message if running on an unknown
//   platform (as returned by function platform()).
// - UnfoundLibFunc
//   adds an error with a default error message if a required library
//   function is not found.
// - UnknownConfiguration
//   adds an error with a default error message if running on an unknown
//   configuration.
// - Die(...)
//   stops execution, showing optional arguments as stings.
//

//
// Object Warning
// ------------
// - Important(msg)
//   prints an important warning to standard output.
//


// Functional games
function constantf                      (val)
function bindfront                      (f ...)
function bindback                       (f ...)
function argspopback                    (args, popnum)
function argspopfront                   (args, popnum)
function fcomposition                   (f1, f2)                        // f1(f2(...))
function membercalltransformation       (object, membername, args)      // "transforms" the given value (object) by calling its member 
                                                                        // in the slot with the given membername, passing to it the expanded args
function membercalltransformer          (membername, args)              // returns a functor that takes an object and does what membercalltransformation does
function equals                         (val1, val2)
function equalitypredicate              (val)
function nothing
function nothingf                                                       => function nothing
function success                        (...)                           => true
function successifier                   (f)                             => f(); true
function foreachofargs                  (f ...)                         // calls f for each argument given, continuing to iterate over the arguments as long as f returns true
function firstarg                       (arguments)
function lastarg                        (arguments)
function argumentSelector               (f, ...)                        // calls f with arguments selected from the actual arguments
                                                                        // by the (numerical) indices passed as variable arguments to this function
//
function isdeltastring  (val)
function isdeltaobject  (val)
function isdeltatable   (val)
function isdeltanumber  (val)
function isdeltaboolean (val)
function isdeltanil     (val)
function isdeltaundefined(val)
function isdeltacallable(val)
function isdeltalist    (val)
function isdeltafunction(val)
function isdeltamethod  (val)
function toboolean      (val)
function tobool         (val)
//
function assert_notnil      (val)
function assert_notundef    (val)
function assert_str         (val)
function assert_num         (val)
function assert_obj         (val)
function assert_tbl         (val)
function assert_eq          (val1, val2)
function assert_lt          (val1, val2)
function assert_gt          (val1, val2)
function assert_ge          (val1, val2)
function assert_or          (cond1, cond2)
function assert_and			(cond1, cond2)
function assert_gt_or_eq    (val1, val2, val3, val4)
function assert_ge_or_eq    (val1, val2, val3, val4)
function assert_def         (val)
function assert_fail
//
function pfield                         (field_name)
function dobj_get                       (dobj, field_name)
function dobj_set                       (dobj, field_name, val)
function dobj_contains                  (dobj, val)
function dobj_contains_key              (dobj, key)
function dobj_contains_any              (dobj, dobj_other)
function dobj_contains_any_key          (dobj, keys)
function dobj_contains_any_key_from     (dobj, dobj_other)
function dobj_checked_set               (dobj, validKeys, key, val)
function dobj_checked_get               (dobj, key)
function dobj_length                    (dobj)
function dobj_keys                      (dobj)
function dobj_empty                     (dobj)
function dobj_copy                      (dob)
function dobj_replace                   (dobj, key, val)                 => oldval
function dobj_equal                     (dobj1, dobj2)                   // unoverloaded equality check
//
function dval_copy                      (dval)                           // deep copy
function dval_copy_into                 (dst, src)
//
function methodinstalled                (dobj, method)                   => method
//
function iterable_contains              (iterable, value)
function iterable_to_deltaobject        (iterable)
                                                                    // of the original iterable mapped through mapf()
function iterable_find                  (iterable, predicate)
function iterable_get                   (iterable, index)           // index begins at 0
function iterable_foreach               (iterable, f)               // iterate over iterable, passing elements to f(), while f() returns true
//
// a simple std::list wrapper
function list_new                       ()
function list_append                    (list, element)
function list_push_back                 (list, element)
function list_foreach                   (list, f)
function list_to_stdlist                (list)
function list_clone                     (list)
function iterable_clone_to_list         (iterable)
function iterable_map_to_list           (iterable, mapf)            // returns an iterable with all the contents
//
function forall                         (Iterable, predicate)
function forany                         (Iterable, predicate)
function Iterable_fromList              (wrapped_list)
function Iterable_fromDObj              (dobj)
function Iterable_foreach               (Iterable, f)
//
function file_isreadable                (filepath)
function file_isabsolutepath            (filepath)
function file_hidden                    (filename)
function file_separator                                             // platform-dependent file separator (returned as a deltastring)
function file_pathconcatenate           (...)
function file_basename                  (filepath)
function file_copy                      (src, dst)
//
function shell                          (command)
function shellcopy                      (srcpath, destpath)
//
function strslice                       (str, start_index, end_index)
function strsubstr                      (str, start_index ...)
function strsub                         (string, pattern, replacement)
function strgsub                        (string, pattern, replacement)
function strindex						(hay, needle)
function strrindex                      (hay, needle)
function strlength                      (str)
function strchar                        (str, charindex)
function strmul                         (str, num)
function strsplit                       (str, split, limit)
function strdeltaescape                 (str)

// program flow/control utilities
function orval  (val1, val2)        // val1? val1 : val2
function ternary                        (cond, val1, val2)

// Serialisatin utils
function dobj_dump_delta    (dobj, appendf, objvarname, precode, postcode)

// xml utilities
function xmlload            (filename_str)
function xmlloaderror
function xmlparse			(string)
function xmlparseerror

// logging
function log     (from, ...)


////////////////////////////////////////////////////////////////////////
function mixin_state                            (state, mixin)
function stateFieldsClash                       (fields1, fields2)
function prototypesClash                        (proto1, proto2)
function mixinRequirementsFulfilled             (prototype, requirements)
function stateFieldsClashForAnyMixIn            (object, newMixInStateFields)
function prototypesClashForAnyMixIn             (object, newMixInPrototype)
function mixinRequirementsFulfilledByAnyMixIn   (object, newMixInRequirements)
function mixin                                  (newInstanceState, mixin_instance, mixin_prototype)
//
function Class_checkedStateInitialisation(newObjectInstance, validFieldsNames, fields)  
                Class_checkedStateInitialisation(newObjectInstance, validFieldsNames, fields) 
                        newObjectInstance: the new object instance whose state will be initialised
                        validFieldsNames : a delta object with all the valid fields' names (in normal form)
                        fields           : a delta object which maps field-names to values
function Class_isa              (obj, a_class)
function Class_classRegistry

//////////////////////////////
// Object-class-elements
// for use in Class-class implementation (since it cannot use the Object class as a complete class)
// *** Object mixin
//     -----------------------
//     <^> createInstance( )
//     <^> Public methods
//         - getClasses()
//           returns a delta object containing references to all the classes
//           mixed-in into this object.
//         - addClass(class)
//           adds a class to the registery of classes mixed-in into this Object.`
//     <^> state fields
//         - classes : std::list
function Object_stateFields
function Object_stateInitialiser
function Object_prototype
function Object_mixinRequirements
function mixinObject                (newInstance, newInstanceStateFields, newInstancePrototype)
function unmixinObject              (instance)

//////////////////////////////
// *** Class class - hand made
//     -----------------------
//     <^> createInstance( stateInitialiser, prototype, mixInRequirements, stateFields, className )
//     <^> Public methods
//         - createInstance( ... )
//               stateInitialiser is called with arguments: the new object's state, a delta object
//               with all the valid state member names
//               and whatever other arguments are passed to createInstance().
//         - mixInRequirements
//               returns a delta object which contains strings that denote public methods
//               which should exist in an object that is trying to mix in this class.
//               If there are no mix-in requiremens this method may return [] or nil.
//         - fulfillsRequirements(a_mixin)
//               This method returns true if its prototype implements fully the requirements
//               set by the provided mixin.
//         - stateFieldsClash(a_mixin)
//               Checks if this class' state fields (non-private-name-form) clash with the given
//               mixin's.
//         - prototypesClash(another_class)
//               Checks if this class' prototype and the given prototype have some common
//               members (public API methods).
//         - mixIn(anotherClass, createInstanceArgumentsFunctor)
//               registers a class to be mixed in when a new object of this calss is
//               created. If the "anotherClass" cannot be mixed-in this one (due to
//               common state entries or not fulfilling requirements) nil is returned.
//               Otherwise, a "true" evaluating value is returned.
//               "createInstanceArgumentsFunctor" is functor which is passed the same
//               arguments that are passed to this class' "createInstance" and should return
//               a delta object with arguments to be passed
//               to the given class' "createInstance()" method in order to create an object
//               for merging with a new object of this class.
//         - mixedIn
//               returns a deltaobject with pairs (simple deltaobjects) of classes registered
//               to be mixed in along with their respective createInstanceArguments-generators-functors.
//         - getPrototype
//               returns this class' prototype for inspection and possible alteration.
//         - stateFields
//               returns a delta object with this class' state fields (not in their private-field-name form)
//         - get/setClassName
//               gets/sets this class' name
//     <^> state fields
//         - stateInitialiser
//         - prototype
//         - mixInRequirements
//         - stateFields
//         - mixInRegistry
//         - className
function Class_linkState     (state, class)

// Classiness
function becomeClassy
function becomeLean
function beClassy
function beLean

////////////////////////////////////////////////////////////////////////
//////////////////////////////
// *** Path class
//     Modeling a path, which can be relative or absolute.
//     -----------------------
//     <^> createInstance( path:deltastring, isabsolute:boolean )
//     <^> Mixes in:
//     <^> Public methods
//         - deltaString
//               returns this path as a delta string
//         - IsAbsolute
//         - IsRelative
//         - Concatenate(another_relative_path:pathable)
//               returns a Path representing the concatenation of
//               the two paths.
//         - Extension
//               returns the fie extension if this is a file path.
//         - asWithExtension(ext:deltastring)
//               returns a new path instance which is the same as
//               this path instance except for the new path having
//               as an extension the one to this call.
//         - Append !!! (str:deltastring)
//               appends the given string to THIS path, and returns it.
//         - basename
//               returns a deltastring with the basename of this path
//               (the path up to the last "/" [for linux] or up to the last
//               "\" [for windows]).
//     <^> state fields
//         - Path_path
//         - Path_absolute

function Path_isaPath     (obj)
function Path_fromPath    (path)    "path" can be a deltastring or a Path instance.
                                    If it is a deltastring, the path is checked for
                                    absolutity by ::file_isabsolutepath.
function Path_castFromPath(path)    same for "castFromPath" but if passed argument is a Path instance
                                    already, it is returned as-is.
                                    


////////////////////////////////////////////////////////////////////////
//////////////////////////////
// *** Locatable class
//     Has a location on the file system, represented as a Path object.
//     -----------------------
//     <^> createInstance( path:Path_fromPath() )
//     <^> Public methods
//         - get/setLocation (path:Path_fromPath())
//               gets/sets this locatable's location
//     <^> state fields
//         - Locatable_path

////////////////////////////////////////////////////////////////////////
//////////////////////////////
// *** Namable class
//     A mix-in so that objects have names.
//     -----------------------
//     <^> createInstance( name:string )
//     <^> Public methods
//         - get/setName
//               gets/sets this object's name.
//     <^> state fields
//         - Namable_name

////////////////////////////////////////////////////////////////////////
//////////////////////////////
// *** IDable class
//     A mix-in so that objects have IDs.
//     -----------------------
//     <^> createInstance( id:string )
//     <^> Public methods
//         - get/setID
//               gets/sets this object's ID.
//     <^> state fields
//         - IDable_id

////////////////////////////////////////////////////////////////////////
enum ProjectType: StaticLibrary
                  DynamicLibrary
                  Executable 
function ProjectType_isValid(type)

////////////////////////////////////////////////////////////////////////
//////////////////////////////
// *** CProject class
//       A programming project, containing source fileds, include directories, and
//     dependency subprojects.
//     Subproject's location is interpreted as relative to this project's location.
//       "Project manifestation" (or simply "manifestation") is the concept of this 
//     projet object manifesting as a series of files on the filesystem which
//     represent "project files" of a building system or another. Manifestations are
//     identified by string identifiers (for e.x., Makefile, VS, etc).
//       Each project object can hold an arbitrary object which represents
//     manifestation-specific extra options or configuration. These are understanble only by
//     the specific manifestation they refer to.
//       Dependency-subprojects referred to by this project are automtically added to this project's
//     dependencies according to the manifestation. They are NOT automatically included in
//     this project's building process.
//     -----------------------
//     <^> createInstance( projectType:ProjectType_*, path:Path_fromPath(), projectName:deltastring )
//     <^> Mixes in: Locatable, Namable
//     <^> Public methods
//         - addSource(path:Path-castable)
//               adds a source file to this project. The filepath is relative to
//               the project's location.
//         - Sources
//               returns an std::list with all the sources that belong to this project (as Path instances).
//         - addIncludeDirectory(path:Path-castable)
//               adds an include path to this project. The filepath is relative to
//               the project's location.
//         - IndluceDirectories
//               returns an std::list with all the include directories of this project.
//         - addDependency(subproject:Project)
//               adds a project as a dependency of this projet. The subproject's
//               paths is interpreted as relative to this project's path.
//         - Dependencies
//               return an std::list with the dependency-projects of this project.
//         - addPreprocessorDefinition(def:deltastring)
//               adds a preprocessor definition to be defined in all compilation units
//               for this project.
//         - PreprocessorDefinitions
//               returns an std::list with all the extra preprocessor defnitions.
//         - addLibraryPath(path:Path-castable)
//               adds a library-search path for this project's building.
//         - LibrariesPaths
//               returns an std::list with the library search paths for this project's building.
//         - addLibrary(libname:deltastring)
//               adds an extra library file name to be included in this project's building
//               process.
//         - Libraries
//               returns an std::list with all the extra libraries to be included in this project's
//               building process.
//         - setManifestationConfiguration(manifestation_id:deltasting, config:delta object)
//               sets the manifestation specific options for the given manifestation.
//               Any previous configuration added for this manifestation is overwritten.
//         - getManifestationConfiguration(manifestation_id:deltastring)
//               returns this project's configuration (delta) object for the given
//               manifestation.
//         - isStaticLibrary
//         - isDynamicLibrary
//         - isLibrary
//         - isExecutable
//               return true if this project's type is StaticLibrary, DynamicLibrary or
//               Executable, respectively.
//         - set/getOutputDirectory (path:Path-castable)
//               sets/gets this projects output directory filepath. When this is a library project,
//               this is the produced library file's directory-filepath. When this is an executable
//               project, this will be the produced executable's directory-filepath.
//         - set/getOutputName (name:deltastring)
//               sets/gets this project's result's name. If this is a library project, this
//               should be the library name, stripped of all system-dependent library naming
//               conventions (prefices, extensions, etc). The same holds in case this is an
//               executable project (extensions, etc).
//         - set/getAPIDirectory(path:Path-transformable)
//               sets/gets this projects root API directory filepath (a Path instance).
//               The API directory is where this project stores its header files, in
//               case this is a library project.
//         - SourceExtension
//               returns a deltastring with the extension that source files of this project
//               should have.
//         - ObjectExtension
//               returns a deltastring with the extension that produced object files of this
//               project will have.
//         - DependencyExtension
//               returns a deltastring with the extension that produced dependency files of 
//               this project will have.
//     <^> state fields
//         01. CProject_type
//         02. CProject_manifestationsConfigurations
//         03. CProject_sources
//         04. CProject_includes
//         05. CProject_dependencies
//         06. CProject_definitions
//         07. CProject_librariesPaths
//         08. CProject_libraries
//         09. CProject_outputName
//         10. CProject_outputDirectory
//         11. CProject_apidir

////////////////////////////////////////////////////////////////////////
//////////////////////////////
// *** CSolution class
//       A programming solution (in C, C++) which includes various
//     projects (CProject).
//       A solution can resolve the building order of the projects it contains.
//     Thus, a manifestation will be aware of what order it should build the
//     projects contained by this solution in.
//     -----------------------
//     <^> createInstance( solutionPath:Path_fromPath(), solutionName:deltastring )
//     <^> Mixes in: Locatable, Namable
//     <^> Public methods
//         - findProject(projectName:deltastring)
//               searches for a project with the given name and returns it, if found.
//               returns nil otherwise.
//         - addProject(project:CProject)
//               adds a project as a part of this solution.
//         - Projects
//               returns an std::list with all the projects that belong to this solution.
//     <^> state fields
//         01. CSolution_projects

/////////////////////////////////////////////////////////////////
// Class ConfigurationManager
// Maps solution configurations to project configurations and
// keeps track of which projects are to be build in each configuration.
// --------------------------------------------------------------
//     <^> createInstance( )
//     <^> Mixes in:
//     <^> Public methods
//         - addConfiguration(configurationID:deltastring)
//               adds the given configuration to the given project.
//               If the project does not exist, it is created.
//         - Configurations
//               returns a deltaobject with all the registered
//               solution configurations.
//         - registerProjectConfiguration(
//                       solutionConfigurationID:deltastring,
//                       projectID:deltastirng,
//                       projectConfigurationID:deltastring)
//               registers the given configuration for the given
//               project as part of the given configuration for this solution.
//               The project is automatically marked as non-buildable.
//         - Projects(configurationID:deltastring)
//               returns a deltaobject with the IDs of all the projects registered
//               under the given solution configuration (whether as buildable or
//               non-buildable).
//         - markNonBuildable(solutionConfigurationID:deltastring, projectID:deltastirng)
//               marks the given project as non-buildable, under the given solution
//               configuration.
//         - markBuildable(solutionConfigurationID:deltastring, projectID:deltastirng)
//               marks the given project as buildable, under the given solution
//               configuration.
//         - hasConfiguration(configurationID:deltastring)
//               returns true if the given configuration ID exists in the data.
//         - hasProject(configurationID:deltastring, projID:deltastring)
//               returns true if the given project configuration is registered
//               under the given solution configuration.
//         - hasProjectInAnyConfiguration(projID:deltastrin)
//               returns true if the given project ID is registered under
//               any registered configuration.
//         - isNonBuildable(configurationID:deltastring, projID:deltastring)
//               checks whether the given project has been marked non-buildable
//               by configuration, under the given configuration.
//         - isBuildable(configurationID:deltastring, projID:deltastring)
//               checks whether the given project ID has been registered as
//               buildable under the given configuration.
//         - isBuildableInAnyConfiguration(projID:deltastring)
//               checks whether the project indicated by the given project ID
//               has been marked as buildable under any configuration.
//         - isNonBuildableInEveryConfiguration(projID:deltastring)
//               checks whether the project indicated by the given project ID
//               has been marked as nonbuildable under every configuration.
//     <^> state fields
//         01. ConfigurationManager_configurationsMap         [sol_conf_id => [ projid => [ confid, buildable ], ...], ...]

/////////////////////////////////////////////////////////////////
// ConfigurationManagerFactory
// --------------------------------------------------------------
//     - DumpCore(configurationManager, core)
//     - CreateFromCore(core)                       => configurationManager


/////////////////////////////////////////////////////////////////
// Class ProjectEntry
// A temporary project data holder. It also provides crossing
// information to and from IDs.
// --------------------------------------------------------------
//     <^> createInstance( )
//     <^> Mixes in: IDable, Namable, Locatable
//     <^> Public methods
//         - get/setParentReference(parentID:deltastring)
//               gets or sets this projects "parent reference".
//         - addDependency(projID:deltastring)
//               adds the given project id to the list of dependencies
//               (must be a valid ID).
//         - Dependencies
//               returns an iterable with all the IDs (as strings)
//               of the dependencies.
//     <^> Static
//         - validProjectID(projid:deltastring)
//     <^> state fields
//         01. ProjectEntry_parentReference
//         02. ProjectEntry_dependencies

/////////////////////////////////////////////////////////////////
// ProjectEntryFactory
// --------------------------------------------------------------
//     - DumpCore(projectEntry, core)
//     - CreateFromCore(core)             => projectEntry

/////////////////////////////////////////////////////////////////
// Class ProjectEntryHolder
// A simple holder for ProjectEntry-s.
// --------------------------------------------------------------
//     <^> createInstance( )
//     <^> Mixes in: 
//     <^> Public methods
//         - addProjectEntry(projectEntry)
//         - getProjectEntry(projectID)
//         - ProjectEntries
//     <^> Static
//     <^> state fields
//         00. ProjectEntryHolder_entries

/////////////////////////////////////////////////////////////////
// ProjectEntryHolderFactory
// --------------------------------------------------------------
//     - DumpCore(projectEntryHolder, core)
//     - CreateFromCore(core)                => projectEntryHolder

/////////////////////////////////////////////////////////////////
// Struct SolutionData
// Solution data extracted from a Solution File
// --------------------------------------------------------------
//     <^> Fields
//             - ConfigurationManager
//             - ProjectEntryHolder

/////////////////////////////////////////////////////////////////
// SolutionDataFactory
// --------------------------------------------------------------
//     - DumpCore(solutionData, core)
//     - CreateFromCore(core)            => solutionData



/////////////////////////////////////////////////////////////////
// Class VariableEvaluator
// Evaluates variables found in VisualStudio project files.
// --------------------------------------------------------------
//     <^> createInstance( solutionDirectory:Path_fromPath )
//     <^> Mixes in:
//     <^> Public methods
//         - eval(varname:deltastring)
//               returns a deltastring with the value of the given
//               variable.
//     <^> state fields
//         00. VariableEvaluator_variables
//         01. VariableEvaluator_root
